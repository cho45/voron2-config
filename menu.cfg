# from https://raw.githubusercontent.com/Klipper3d/klipper/master/klippy/extras/display/menu.cfg

[display]
menu_root: __main0
menu_timeout: 60

[menu __main0]
type: list
name: Main

### menu tune ###
[menu __main0 __tune]
type: list
#enable: {printer.idle_timeout.state == "Printing"}
name: Tune

[menu __main0 __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __main0 __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __main0 __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: 0
input_min: -5
input_max: 5
input_step: 0.005
gcode:
    Z_ADJUST VALUE={menu.input}

[menu __main0 __tune __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
gcode:
    PAUSE
    {menu.exit()}

[menu __main0 __tune __resume]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Resume printing
gcode:
    RESUME
    {menu.exit()}

[menu __main0 __tune __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Cancel printing
gcode:
    CANCEL_PRINT
    {menu.exit()}


## menu Preheat ##
[menu __main0 __preheat]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Preheat

[menu __main0 __preheat __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"E: %3.0f~right_arrow~%3.0f" % (printer.extruder.temperature, menu.input)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main0 __preheat __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f~right_arrow~%3.0f" % (printer.heater_bed.temperature, menu.input)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __main0 __preheat __preheat_pla]
type: list
name: PLA (200/60)

[menu __main0 __preheat __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S60
    M104 S200
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode:
    M104 S200
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode:
    M140 S60
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_abs]
type: list
name: ABS (245/100)

[menu __main0 __preheat __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S100
    M104 S245
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode:
    M104 S245
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode:
    M140 S100
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_petg]
type: list
name: PETG (235/80)

[menu __main0 __preheat __preheat_petg __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S80
    M104 S235
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_petg __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode:
    M104 S235
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_petg __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode:
    M140 S80
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_tpu]
type: list
name: TPU (230/50)

[menu __main0 __preheat __preheat_tpu __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S50
    M104 S230
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_tpu __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode:
    M104 S230
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __preheat_tpu __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode:
    M140 S50
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __cooldown]
type: list
name: Cooldown

[menu __main0 __preheat __cooldown __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Cooldown all
gcode:
    M104 S0
    M140 S0
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __cooldown __hotend]
type: command
enable: {'extruder' in printer}
name: Cooldown hotend
gcode:
    M104 S0
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __preheat __cooldown __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Cooldown hotbed
gcode:
    M140 S0
    BEEP DUR=50 FREQ=900 I=1
    {menu.exit()}

[menu __main0 __loadf]
type: command
name: Load Filament
enable: {not printer.idle_timeout.state == "Printing"}
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    BEEP DUR=50 FREQ=900 I=1
    M83
    G1 E50 F960
    G1 E50 F240
    BEEP DUR=200 FREQ=900 I=3
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main0 __unloadf]
type: command
name: Unload Filament
enable: {not printer.idle_timeout.state == "Printing"}
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    BEEP DUR=50 FREQ=900 I=1
    M83
    G1 E-50 F3000
    G1 E-50 F3000
    G1 E-50 F3000
    BEEP DUR=200 FREQ=900 I=3
    RESTORE_GCODE_STATE NAME=__filament__load

### menu tune ###
[menu __main0 __control]
type: list
name: Control

[menu __main0 __control __move_axis]
type: list
enable: {(not printer.idle_timeout.state == "Printing") and ("xy" in printer.toolhead.homed_axes)}
name: Move Axis

[menu __main0 __control __move_axis __axis_x]
type: input
enable: {(not printer.idle_timeout.state == "Printing") and ("x" in printer.toolhead.homed_axes)}
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
realtime: True
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
        {menu.exit()}
    {% else %}
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis
    {% endif %}

[menu __main0 __control __move_axis __axis_y]
type: input
enable: {(not printer.idle_timeout.state == "Printing") and ("y" in printer.toolhead.homed_axes)}
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
realtime: True
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
        {menu.exit()}
    {% else %}
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis
    {% endif %}

[menu __main0 __control __move_axis __axis_z]
type: input
enable: {(not printer.idle_timeout.state == "Printing") and ("z" in printer.toolhead.homed_axes)}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
realtime: True
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
        {menu.exit()}
    {% else %}
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis
    {% endif %}

[menu __main0 __control __move_axis __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
        {menu.exit()}
    {% else %}
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis
    {% endif %}

[menu __main0 __control __home]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home All
gcode: G28

[menu __main0 __control __homez]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home Z
gcode: G28 Z

[menu __main0 __control __homexy]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home X/Y
gcode: G28 X Y

[menu __main0 __control __quad_gantry_level]
type: command
enable: {not printer.idle_timeout.state == "Printing" and ('quad_gantry_level' in printer)}
name: Quad Gantry Lvl
gcode: QUAD_GANTRY_LEVEL

[menu __main0 __control __cleannozzle]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Clean Nozzle
gcode:
    {% if "xyz" in printer.toolhead.homed_axes %}
        CLEAN_NOZZLE
    {% else %}
        M117 Must be homed!
        {menu.exit()}
    {% endif %}

[menu __main0 __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.10
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __main0 __control __caselight]
type: input
name: Lights {'%3d' % (menu.input*100)}%
input: {printer['neopixel chamber'].color_data[0][0]}
input_min: 0.0
input_max: 1.0
input_step: 0.10
gcode:
    SET_LED LED=chamber RED={menu.input} GREEN={menu.input} BLUE={menu.input}

[menu __main0 __control __lightoff]
type: command
name: All Light Off
gcode:
    LIGHT_OFF

[menu __main0 __setup]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Setup

[menu __main0 __setup __attachprobe]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('probe' in printer)}
name: Attach Probe
gcode:
    {% if "xy" not in printer.toolhead.homed_axes %}
    G28 X Y
    {% endif %}
    ATTACH_PROBE

[menu __main0 __setup __dockprobe]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('probe' in printer)}
name: Dock Probe
gcode:
    DOCK_PROBE

[menu __main0 __setup __calibratez]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('probe' in printer)}
name: Calibrate Z
gcode:
   CALIBRATE_Z


[menu __main0 __machine]
type: list
name: Machine

[menu __main0 __machine __mdns]
type: command
name: mDNS: {printer.network_status.mdns}

[menu __main0 __machine __ethip]
type: command
name: Eth IP: {printer.network_status.ethip}

[menu __main0 __machine __wifissid]
type: command
name: Wifi SSID: {printer.network_status.wifissid}

[menu __main0 __machine __wifiip]
type: command
name: Wifi IP: {printer.network_status.wifiip}

[menu __main0 __machine __temp0]
type: command
name: {'Pi %.1f~degrees~C' % (printer['temperature_sensor mcu_0_raspberry_pi'].temperature)}

[menu __main0 __machine __temp1]
type: command
name: {'MCU %.1f~degrees~C' % (printer['temperature_sensor mcu_1_octopus'].temperature)}

[menu __main0 __machine __temp2]
type: command
enable: {'temperature_sensor room_0_external' in printer}
name: {'RT %.1f~degrees~C' % (printer['temperature_sensor room_0_external'].temperature)}

[menu __main0 __machine __temp3]
type: command
enable: {'temperature_sensor room_1_top' in printer}
name: {'Top %.1f~degrees~C' % (printer['temperature_sensor room_1_top'].temperature)}

[menu __main0 __machine __temp4]
type: command
enable: {'temperature_sensor room_2_bottom' in printer}
name: {'Bottom %.1f~degrees~C' % (printer['temperature_sensor room_2_bottom'].temperature)}

[menu __main0 __machine __current_xy]
type: command
name: {'X:%.1fA Y:%.1fA' % (printer['tmc2209 stepper_x'].run_current, printer['tmc2209 stepper_y'].run_current)}

[menu __main0 __machine __current_z]
type: command
name: {'Z0:%.1fA Z1:%.1fA Z2:%.1fA Z3:%.1fA' % (printer['tmc2209 stepper_z'].run_current, printer['tmc2209 stepper_z1'].run_current, printer['tmc2209 stepper_z2'].run_current, printer['tmc2209 stepper_z3'].run_current)}

[menu __main0 __machine __current_e]
type: command
name: {'E:%.1fA' % (printer['tmc2209 extruder'].run_current)}

[menu __main0 __machine __restart]
type: list
name: Restart...

[menu __main0 __machine __restart __host]
type: command
name: Restart
gcode:
    M117 Restart...
    {menu.exit()}
    RESTART

[menu __main0 __machine __restart __firmware]
type: command
name: Firmware Restart
gcode:
    M117 Firmware Restart...
    {menu.exit()}
    FIRMWARE_RESTART

[menu __main0 __machine __stepperoff]
type: list
enable: {(not printer.idle_timeout.state == "Printing")}
name: Stepper Off...

[menu __main0 __machine __stepperoff __yes]
type: command
enable: {(not printer.idle_timeout.state == "Printing")}
name: Confirm Stepper Off
gcode:
    M84
    M18
    {menu.back()}

[menu __main0 __machine __shutdown]
type: list
enable: {(not printer.idle_timeout.state == "Printing")}
name: Shutdown...

[menu __main0 __machine __shutdown __yes]
type: command
enable: {(not printer.idle_timeout.state == "Printing")}
name: Confirm Shutdown
gcode:
    BEEP DUR=50 FREQ=900 I=1
    M117 Shutting down...
    {menu.exit()}
    G4 S2
    {action_call_remote_method("shutdown_machine")}
    G4 S1
    {action_respond_info('action:poweroff')}

[menu __main0 __machine __dump]
type: command
name: Dump parameters
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}
