#####################################################################
#   Macros
#####################################################################

[gcode_macro PRINT_START]
description: Use PRINT_START for the slicer starting script
# CALIBRATE_Z は RESTORE_GCODE_STATE すると失われるので注意
# PrusaSlicer で以下のように gcode startup を設定
# print_start EXTRUDER=[first_layer_temperature[initial_tool]] BED=[first_layer_bed_temperature]
gcode:
    {% set extruder_temp = params.EXTRUDER|default(245)|int %}
    {% set bed_temp = params.BED|default(100)|int %}
    SET_GCODE_VARIABLE MACRO=Z_ADJUST VARIABLE=total VALUE=0

    LIGHT_ON
    BED_MESH_CLEAR

    M140 S{bed_temp}
    M104 S{extruder_temp}

    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

    M117 Initial Homing
        G90                   ; absolute positioning
        {% if "xyz" in printer.toolhead.homed_axes %}
        G0 Z20 X245 Y245 F12000     ; for fast homing
        {% endif %}
        G28                   ; initial homing
        G0 Z20 F1500
        G0 X77 Y250 F12000

    M117 Heating...
        STATUS_HEATING
        ; heat both for chamber temperature
        M106 S255 ; Cooling Fan On
        M190 S{bed_temp}      ; wait
        M109 S{extruder_temp} ; wait
        G92 E0                         ; zero the extruder
        G1 E-1.0 F1800                 ; retract filament

    CLEAN_NOZZLE

    Attach_Probe_Lock

    M117 Apply QGL
        STATUS_LEVELING
        QUAD_GANTRY_LEVEL

    M117 Re-homing
        G0 Z20 X245 Y245 F12000     ; for fast homing
        G28

    M117 Calibrating Z
        STATUS_CALIBRATING_Z
        CALIBRATE_Z

    M117 Bed mesh
        BED_MESH_CALIBRATE

    M106 S0 ; Cooling Fan Off
    Dock_Probe_Unlock

    M117 Purge Extruder
        STATUS_PRINTING
        G0 X77 Y250 F12000
        G0 Z5
        G92 E0                         ; zero the extruder
        G1 E10.0 F180
        G0 X52 F12000

    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    BED_MESH_CLEAR
    
    G90                                      ; absolute positioning
    G0 X77 Y250 F12000
    M107                                     ; turn off fan
    
    # BED_MESH_CLEAR
    STATUS_OFF
    M117 Print End
    BEEP_MORSE CODE="...-.-"
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro Z_ADJUST]
description: SET_GCODE_OFFSET Z_ADJUST and show total adjusted value from CALIBRATE_Z on PRINT_START 
variable_total: 0
gcode:
    {% set adj = params.VALUE|default(0)|float %}
    {% set total = total + adj %}
    SET_GCODE_VARIABLE MACRO=Z_ADJUST VARIABLE=total VALUE={total}
    SET_GCODE_OFFSET Z_ADJUST={adj} MOVE=1
    _Z_ADJUST_PRINT 

[gcode_macro _Z_ADJUST_PRINT]
gcode:
    {% set total = printer["gcode_macro Z_ADJUST"].total %}
    { action_respond_info("Total Adjusted: %.3f, New Origin: %.5f" % (total, printer.gcode_move.homing_origin.z)) }

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 77
variable_start_y: 250
variable_start_z: 1
variable_wipe_dist: -26
variable_wipe_qty: 5
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
    M117 Cleaning
    STATUS_CLEANING
    Dock_probe
    {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

    G90                                            ; absolute positioning
    ## Move nozzle to start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F1500

    ## Wipe nozzle
    {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x + wipe_dist} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    {% endfor %}

    ## Raise nozzle
    G1 Z{raise_distance}


[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}

[gcode_macro BEEP_MORSE]
gcode:
    {% set freq = params.FREQ|default(1000)|int %}     ; Frequency in Hz.
    {% set wpm = params.WPM|default(12)|int %}         ; Speed in WPM (typicaly 12-15wpm)
    {% set code = params.CODE|default(".-.")|string %} ; Morse code
    {% set unit = 1200.0 / wpm %} ; DOT unit in ms
    {% set cycle = 1.0 / freq %}

    {% for c in code %}
        {% if c == " " %}
            G4 P{unit * 3}
        {% elif c == "." %}
            SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={cycle}
            G4 P{unit}
            SET_PIN PIN=beeper VALUE=0
            G4 P{unit}
        {% elif c == "-" %}
            SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={cycle}
            G4 P{unit * 3}
            SET_PIN PIN=beeper VALUE=0
            G4 P{unit}
        {% endif %}
    {% endfor %}


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        M117 Pausing...
        BEEP_MORSE CODE=".-..."
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
        M117 Paused...
        BEEP_MORSE CODE="-.-"
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        M117 Resuming...
        BEEP_MORSE CODE=".-..."
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            STATUS_HEATING
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    M117 Canceling...
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


[gcode_macro LIGHT_OFF]
gcode:
    SET_LED LED=chamber RED=0 GREEN=0 BLUE=0
    SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=0
    SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=0

[gcode_macro LIGHT_ON]
gcode:
    SET_LED LED=chamber RED=1 GREEN=1 BLUE=1
    SET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1
    SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1
